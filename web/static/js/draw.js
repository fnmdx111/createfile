// Generated by CoffeeScript 1.7.1
(function() {
  var container, fc_container, fire_post, _hide_loading, _show_loading;

  container = document.getElementById('container');

  fc_container = document.getElementById('fc-container');

  _show_loading = function() {
    $('#loading').show();
    return $('#ct-view').hide();
  };

  _hide_loading = function() {
    $('#loading').hide();
    return $('#ct-view').show();
  };

  _hide_loading();

  fire_post = function() {
    var stream_uri;
    stream_uri = $('#stream_uri').val();
    _show_loading();
    return $.post('/cl', {
      stream_uri: stream_uri
    }, function(result) {
      var data, draw_fc_graph, draw_graph, fc_graph, fc_options, graph, idx_table, options, stream_title, _c_max, _c_min, _cl_fc, _cl_flattened;
      _hide_loading();
      data = result['files'];
      idx_table = result['idx_table'];
      _cl_fc = _.map(data, function(l) {
        return [l[0], l[1] != null ? l[1][0] : 0];
      });
      _cl_fc = _.sortBy(_cl_fc, function(i) {
        return i[0];
      });
      _cl_flattened = _.flatten(_.map(data, function(l) {
        return l.slice(1);
      }));
      _c_min = _.min(_cl_flattened);
      _c_max = _.max(_cl_flattened);
      stream_title = stream_uri === '' ? 'default stream' : stream_uri;
      options = {
        ct_view: {
          show: true,
          horizontal: false,
          shadowSize: 0.5,
          barWidth: 10,
          HtmlText: false,
          topPadding: 10
        },
        xaxis: {
          mode: 'time',
          labelsAngle: 45,
          autoscale: true
        },
        yaxis: {
          autoscale: true,
          min: _c_min,
          max: _c_max,
          margin: true
        },
        selection: {
          mode: 'xy'
        },
        title: "CT Plot - " + stream_title,
        mouse: {
          track: true,
          relative: true,
          trackFormatter: function(obj) {
            var date, path;
            date = moment(Math.floor(obj.x)).format('YYYY/MM/DD HH:mm:ss');
            path = idx_table[obj.x.toString()][obj.y[0].toString()];
            return "" + path + " ::= cl: " + obj.y + ", ts: " + date;
          }
        }
      };
      fc_options = {
        line: {
          show: true
        },
        xaxis: {
          mode: 'time',
          labelsAngle: 45,
          autoscale: true
        },
        yaxis: {
          autoscale: true,
          min: _c_min,
          max: _c_max,
          margin: true
        },
        selection: {
          mode: 'xy'
        },
        title: "FC Plot - " + stream_title
      };
      draw_graph = function(opts) {
        return Flotr.draw(container, [data], Flotr._.extend(Flotr._.clone(options), opts || {}));
      };
      draw_fc_graph = function(opts) {
        return Flotr.draw(fc_container, [_cl_fc], Flotr._.extend(Flotr._.clone(fc_options), opts || {}));
      };
      graph = draw_graph();
      fc_graph = draw_fc_graph();
      Flotr.EventAdapter.observe(container, 'flotr:select', function(area) {
        graph = draw_graph({
          xaxis: {
            min: area.x1,
            max: area.x2,
            mode: 'time',
            labelsAngle: 45
          },
          yaxis: {
            min: area.y1,
            max: area.y2
          }
        });
        return fc_graph = draw_fc_graph({
          xaxis: {
            min: area.x1,
            max: area.x2,
            mode: 'time',
            labelsAngle: 45
          },
          yaxis: {
            min: area.y1,
            max: area.y2
          }
        });
      });
      return Flotr.EventAdapter.observe(container, 'flotr:click', function() {
        graph = draw_graph();
        return fc_graph = draw_fc_graph();
      });
    });
  };

  $('#fire_post').click(fire_post);

  shortcut.add('enter', function() {
    return fire_post();
  });

}).call(this);

//# sourceMappingURL=draw.map
